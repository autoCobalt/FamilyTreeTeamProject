import java.util.*;
import java.io.*;

public class AcceptFile {
    // Each line of file is formatted as follows:
// Person,FamilyName,GivenName,Suffix,DOB,BirthPlace,DOD,DeathPlace,Parents
// if a piece of info is not known or present, there will be a blank
// ex. Person,FamilyName,GivenName, ,DOB,BirthPlace, , ,Parents

    //currently, this method adds all people to the graph
    public void readFile(String filename) {
        Scanner fileScanner;
        String line=" ";
        String[] lineInfo=null;
        GraphType<String> familyTree=new GraphType<>();
        try {
            fileScanner=new Scanner(new File(filename));
            while(fileScanner.hasNext()) {
                line=fileScanner.nextLine();
                if(line.equals("Person,35,,,,,,,")) {
                    //update this with size of graph to create empty nodes all at once
                    lineInfo=line.split(",");
                    familyTree.addPerson(personInfo[0]);
                    Person p = familyTree.getPerson(personInfo[0]);
                    p.setPersonID(personInfo[0]);
                    p.setLastName(personInfo[1]);
                    p.setFirstName(personInfo[2]);
                    p.setSuffix(personInfo[3]);
                    p.setBirthDate(personInfo[4]);
                    p.setBirthPlace(personInfo[5]);
                    p.setDeathDate(personInfo[6]);
                    p.setDeathPlace(personInfo[7]);
                    p.setParentRelationID(personInfo[8]);
                }
                else if (line.equals("Partnership,10, , , , , , , ")) {
                    lineInfo=line.split(",");
                }
                else if (line.equals(Children,,,,,,,,)){
                    lineInfo=line.split(",");
                }
            }
        } catch (IOException e) {
            System.out.println("File not found");
        }
    }
}


