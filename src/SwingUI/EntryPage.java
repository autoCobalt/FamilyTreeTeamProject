package SwingUI;

import JavaClasses.TreeGenealogy;

import javax.swing.*;
import javax.swing.border.TitledBorder;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.*;

public class EntryPage {
    private JPanel EntryScreen;
    private JTextField promptText;
    private JButton importFileButton;
    private JButton viewExistingButton;
    private JButton button3;
    private JButton button4;

    private String userFile;
    private TreeGenealogy tg;

    public EntryPage() {
        // Adds a listener for button push "import file"
        importFileButton.addActionListener(new ActionListener() {
            @Override
            // Allows a user to select a file from their system
            public void actionPerformed(ActionEvent e) {
                try {
                    readFile();
                } catch (IOException ioException) {
                    ioException.printStackTrace();
                }
            }
        });

        // Adds a listener for button "View Existing Trees"
        viewExistingButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                System.out.println(tg.getPeople());
            }
        });
    }

    public void readFile() throws IOException {
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setCurrentDirectory(new File(System.getProperty("user.home")));
        int result = fileChooser.showOpenDialog(EntryScreen);
        if (result == JFileChooser.APPROVE_OPTION) {
            File selectedFile = fileChooser.getSelectedFile();
            userFile = selectedFile.getAbsolutePath();
            System.out.println("Selected file: " + userFile);
        }
        String treeFile = (userFile);
        TreeGenealogy t = new TreeGenealogy(treeFile);
        tg = t;
    }

    public static void main(String[] args) {
        JFrame frame = new JFrame("EntryPage");
        frame.setContentPane(new EntryPage().EntryScreen);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.pack();
        frame.setVisible(true);
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        EntryScreen = new JPanel();
        EntryScreen.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(7, 1, new Insets(0, 0, 0, 0), -1, -1));
        EntryScreen.setBackground(new Color(-11688872));
        EntryScreen.setForeground(new Color(-16777216));
        EntryScreen.setBorder(BorderFactory.createTitledBorder(BorderFactory.createLineBorder(new Color(-16777216)), "Welcome to the Geneology Tree App!", TitledBorder.CENTER, TitledBorder.DEFAULT_POSITION, this.$$$getFont$$$("Consolas", Font.BOLD, 18, EntryScreen.getFont()), new Color(-16777216)));
        promptText = new JTextField();
        promptText.setBackground(new Color(-11688872));
        promptText.setEditable(false);
        promptText.setEnabled(true);
        Font promptTextFont = this.$$$getFont$$$("Consolas", Font.BOLD, 16, promptText.getFont());
        if (promptTextFont != null) promptText.setFont(promptTextFont);
        promptText.setForeground(new Color(-16777216));
        promptText.setHorizontalAlignment(0);
        promptText.setText("What would you like to do?");
        EntryScreen.add(promptText, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        importFileButton = new JButton();
        importFileButton.setBackground(new Color(-1));
        importFileButton.setEnabled(true);
        Font importFileButtonFont = this.$$$getFont$$$("Consolas", Font.PLAIN, 14, importFileButton.getFont());
        if (importFileButtonFont != null) importFileButton.setFont(importFileButtonFont);
        importFileButton.setForeground(new Color(-16777216));
        importFileButton.setText("Create Tree from File");
        EntryScreen.add(importFileButton, new com.intellij.uiDesigner.core.GridConstraints(1, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        viewExistingButton = new JButton();
        viewExistingButton.setBackground(new Color(-1));
        viewExistingButton.setEnabled(true);
        Font viewExistingButtonFont = this.$$$getFont$$$("Consolas", Font.PLAIN, 14, viewExistingButton.getFont());
        if (viewExistingButtonFont != null) viewExistingButton.setFont(viewExistingButtonFont);
        viewExistingButton.setText("View Existing Trees");
        EntryScreen.add(viewExistingButton, new com.intellij.uiDesigner.core.GridConstraints(2, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        button3 = new JButton();
        button3.setBackground(new Color(-1));
        Font button3Font = this.$$$getFont$$$("Consolas", Font.PLAIN, 14, button3.getFont());
        if (button3Font != null) button3.setFont(button3Font);
        button3.setText("Button");
        EntryScreen.add(button3, new com.intellij.uiDesigner.core.GridConstraints(3, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        button4 = new JButton();
        button4.setBackground(new Color(-1));
        Font button4Font = this.$$$getFont$$$("Consolas", Font.PLAIN, 14, button4.getFont());
        if (button4Font != null) button4.setFont(button4Font);
        button4.setText("Button");
        EntryScreen.add(button4, new com.intellij.uiDesigner.core.GridConstraints(4, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final com.intellij.uiDesigner.core.Spacer spacer1 = new com.intellij.uiDesigner.core.Spacer();
        EntryScreen.add(spacer1, new com.intellij.uiDesigner.core.GridConstraints(6, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        final com.intellij.uiDesigner.core.Spacer spacer2 = new com.intellij.uiDesigner.core.Spacer();
        EntryScreen.add(spacer2, new com.intellij.uiDesigner.core.GridConstraints(5, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        return new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return EntryScreen;
    }

}